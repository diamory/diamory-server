#     ██████  ███████ ███    ██ ███████ ██████   █████  ██      
#    ██       ██      ████   ██ ██      ██   ██ ██   ██ ██      
#    ██   ███ █████   ██ ██  ██ █████   ██████  ███████ ██      
#    ██    ██ ██      ██  ██ ██ ██      ██   ██ ██   ██ ██      
#     ██████  ███████ ██   ████ ███████ ██   ██ ██   ██ ███████

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  diamory-server

  Sample SAM Template for diamory-server

Parameters:
  Stage:
    Type: String
    Default: "staging"
    AllowedValues:
      - "staging"
      - "prod"
    Description: "Stages (staging and prod)."
  Account:
    Type: String
    Description: "ID of the AWS account."
  HostedZone:
    Type: String
    Description: "ID of the hosted zone for diamory.de in Route 53"

Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        ItemTableName: !Ref ItemTable
        AccountTableName: !Ref AccounttTable
        PayloadsBucketName: !Ref PayloadsBucket
        UserPoolId: !Ref UserPool
        PriceInEuro: 3

Resources:

  #     █████  ██    ██ ████████ ██   ██ 
  #    ██   ██ ██    ██    ██    ██   ██ 
  #    ███████ ██    ██    ██    ███████ 
  #    ██   ██ ██    ██    ██    ██   ██ 
  #    ██   ██  ██████     ██    ██   ██

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "diamory-user-pooll-${Stage}"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        -  AttributeDataType: String
           Name: email
           DeveloperOnlyAttribute: false
           Mutable: true
           Required: true
      AliasAttributes:
        - "email"
      UsernameConfiguration:
        CaseSensitive: true
      AutoVerifiedAttributes:
        - "email"
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        SourceArn: !Sub "arn:aws:ses:eu-central-1:${Account}:identity/app.diamory.de"
        From: "diamory app <account@app.diamory.de>"
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: "Bestätigungs-Code"
        EmailMessage: >
          Hallo,
          
          hier ist dein Bestätigunscode, um deine Email-Adresse zu bestätigen und deinen diamory-Account zu aktivieren: {####}
          
          Viele Grüße
  
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - "implicit"
      AllowedOAuthScopes:
        - "profile"
        - "openid"
      CallbackURLs: 
        - "https://app.diamory.de/?callback"
      LogoutURLs:
        - "https://app.diamory.de/?logout"
      SupportedIdentityProviders:
        - "COGNITO"

  UserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub "diamory-user-${Stage}"



  #    ██████  ███████ ███████        █████   ██████  ██████ ███████ ███████ ███████ 
  #    ██   ██ ██      ██            ██   ██ ██      ██      ██      ██      ██      
  #    ██████  █████   ███████ █████ ███████ ██      ██      █████   ███████ ███████ 
  #    ██   ██ ██           ██       ██   ██ ██      ██      ██           ██      ██ 
  #    ██   ██ ███████ ███████       ██   ██  ██████  ██████ ███████ ███████ ███████

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "diamory-role-${Stage}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub "diamory-role-policy-${Stage}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Query"
                Resource:
                  - !Sub "arn:aws:dynamodb:eu-central-1:*:table/${ItemTable}"
                  - !Sub "arn:aws:dynamodb:eu-central-1:*:table/${AccounttTable}"
                  - !Sub "arn:aws:dynamodb:eu-central-1:*:index/${AccounttTable}/expires-index"
                  - !Sub "arn:aws:dynamodb:eu-central-1:*:index/${AccounttTable}/status-index"
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${PayloadsBucket}/*"
              - Effect: Allow
                Action: "ses:SendEmail"
                # TODO: specify only app.diamory.de instead of *, when SES is out of its sandbox
                Resource: "arn:aws:ses:eu-central-1:*:identity/*"
              - Effect: Allow
                Action:
                  - "cognito-idp:AdminDisableUser"
                  - "cognito-idp:AdminDeleteUser"
                Resource: !Sub "arn:aws:cognito-idp:eu-central-1:*:userpool/${UserPool}"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:eu-central-1:*:*"
              - Effect: Allow
                Action: "logs:CreateLogGroup"
                Resource: "*"



  #     █████  ██████  ██ 
  #    ██   ██ ██   ██ ██ 
  #    ███████ ██████  ██ 
  #    ██   ██ ██      ██ 
  #    ██   ██ ██      ██

  ApiDomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${Stage}.api.diamory.de"
      DomainValidationOptions:
        - DomainName: !Sub "${Stage}.api.diamory.de"
          HostedZoneId: !Ref HostedZone
      ValidationMethod: DNS

  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub "diamory-api-${Stage}"
      Auth:
        Authorizers:
          ManagerAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - !Ref UserPoolClient
              issuer: !Sub "https://cognito-idp.eu-central-1.amazonaws.com/${UserPool}"
        DefaultAuthorizer: ManagerAuthorizer
      CorsConfiguration:
        AllowCredentials: true
        AllowOrigins:
          - "https://app.diamory.de"
          - "https://dev.app.diamory.de"
        AllowMethods: 
          - "*"
        AllowHeaders:
          - "*"
        ExposeHeaders:
          - "*"
      Domain:
        DomainName: !Sub "${Stage}.api.diamory.de"
        CertificateArn: !Ref ApiDomainCertificate
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZone


  
  #    ██████   █████  ████████  █████  
  #    ██   ██ ██   ██    ██    ██   ██ 
  #    ██   ██ ███████    ██    ███████ 
  #    ██   ██ ██   ██    ██    ██   ██ 
  #    ██████  ██   ██    ██    ██   ██

  PayloadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "diamory-payloads-${Stage}"
      VersioningConfiguration: 
        Status: Suspended
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ItemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "diamory-item-${Stage}"
      TableClass: "STANDARD"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "accountId"
          AttributeType: "S"
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "accountId"
          KeyType: "HASH"
        - AttributeName: "id"
          KeyType: "RANGE"

  AccounttTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "diamory-accountt-${Stage}"
      TableClass: "STANDARD"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "v"
          AttributeType: "N"
        - AttributeName: "accountId"
          AttributeType: "S"
        - AttributeName: "status"
          AttributeType: "S"
        - AttributeName: "expires"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "v"
          KeyType: "HASH"
        - AttributeName: "accountId"
          KeyType: "RANGE"
      LocalSecondaryIndexes:
        - IndexName: expires-index
          KeySchema:
            - AttributeName: "v"
              KeyType: "HASH"
            - AttributeName: "expires"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes: 
              - "username"
              - "status"
              - "suspended"
              - "times"
            ProjectionType: INCLUDE
        - IndexName: status-index
          KeySchema:
            - AttributeName: "v"
              KeyType: "HASH"
            - AttributeName: "status"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes: 
              - "username"
            ProjectionType: INCLUDE



  #    ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██ ███████ 
  #    ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ ██      
  #    █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██ ███████ 
  #    ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██      ██ 
  #    ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ███████ 

  
  #      _ _                     
  #    (_) |_ ___ _ __ ___  ___ 
  #    | | __/ _ \ '_ ` _ \/ __|
  #    | | ||  __/ | | | | \__ \
  #    |_|\__\___|_| |_| |_|___/

  AddItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "diamory-add-item-${Stage}"
      CodeUri: src/functions/items/add-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 256
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /item
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"

  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "diamory-get-item-${Stage}"
      CodeUri: src/functions/items/get-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 256
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /item/{id}
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"

  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "diamory-update-item-${Stage}"
      CodeUri: src/functions/items/update-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 256
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /item
            Method: put
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "diamory-delete-item-${Stage}"
      CodeUri: src/functions/items/delete-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 256
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /item/{id}
            Method: delete
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"


  #                        _                 _     
  #     _ __   __ _ _   _| | ___   __ _  __| |___ 
  #    | '_ \ / _` | | | | |/ _ \ / _` |/ _` / __|
  #    | |_) | (_| | |_| | | (_) | (_| | (_| \__ \
  #    | .__/ \__,_|\__, |_|\___/ \__,_|\__,_|___/
  #    |_|          |___/                                 

  AddPayloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "diamory-add-payload-${Stage}"
      CodeUri: src/functions/payloads/add-payload
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /payload/{checksum}
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-s3"
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"

  GetPayloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "diamory-get-payload-${Stage}"
      CodeUri: src/functions/payloads/get-payload
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /payload/{checksum}
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-s3"

  ReplacePayloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "diamory-replace-payload-${Stage}"
      CodeUri: src/functions/payloads/replace-payload
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /payload/{oldChecksum}/{newChecksum}
            Method: put
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-s3"
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"

  DeletePayloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "diamory-delete-payload-${Stage}"
      CodeUri: src/functions/payloads/delete-payload
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /payload/{checksum}
            Method: delete
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-s3"
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"



  #                                      _       
  #      __ _  ___ ___ ___  _   _ _ __ | |_ ___ 
  #     / _` |/ __/ __/ _ \| | | | '_ \| __/ __|
  #    | (_| | (_| (_| (_) | |_| | | | | |_\__ \
  #     \__,_|\___\___\___/ \__,_|_| |_|\__|___/

  AddAcountFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "diamory-add-account-${Stage}"
      CodeUri: src/functions/accounts/add-account
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /account
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"



  #    _   _ ___  ___ _ __ ___ 
  #   | | | / __|/ _ \ '__/ __|
  #   | |_| \__ \  __/ |  \__ \
  #    \__,_|___/\___|_|  |___/

  DisableUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "diamory-disable-user-${Stage}"
      CodeUri: src/functions/users/disable-user
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /user/disable
            Method: put
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-cognito-identity-provider"
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
