#     ██████  ███████ ███    ██ ███████ ██████   █████  ██      
#    ██       ██      ████   ██ ██      ██   ██ ██   ██ ██      
#    ██   ███ █████   ██ ██  ██ █████   ██████  ███████ ██      
#    ██    ██ ██      ██  ██ ██ ██      ██   ██ ██   ██ ██      
#     ██████  ███████ ██   ████ ███████ ██   ██ ██   ██ ███████

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  diamory-server

  Sample SAM Template for diamory-server

Globals:
  Function:
    Timeout: 3



#    ███████ ████████  █████   ██████  ███████ ███████ 
#    ██         ██    ██   ██ ██       ██      ██      
#    ███████    ██    ███████ ██   ███ █████   ███████ 
#         ██    ██    ██   ██ ██    ██ ██           ██ 
#    ███████    ██    ██   ██  ██████  ███████ ███████

Parameters:
  StagesEnvironment:
    Type: String
    Default: "staging"
    AllowedValues:
      - "staging"
      - "prod"
    Description: "Environment for stages staging and prod."

Mappings:
  StagesMapping:
    staging:
      Domain: "dev.api.diamory.de"
      CallbackUrl: "https://dev.api.diamory.de?callback"
      LogoutUrl: "https://dev.api.diamory.de?logout"
      ItemTableName: "diamory-item--dev"
      PayloadsBucketName: "diamory-payloads--dev"
      ExecutionRoleWithDynamoDBAccessPolicyName: "diamory-execution-role-policy-dynamodb--dev"
      ExecutionRoleWithS3AccessPolicyName: "diamory-execution-role-policy-s3--dev"
    prod:
      Domain: "api.diamory.de"
      CallbackUrl: "https://api.diamory.de?callback"
      LogoutUrl: "https://api.diamory.de?logout"
      ItemTableName: "diamory-item"
      PayloadsBucketName: "diamory-payloads"
      ExecutionRoleWithDynamoDBAccessPolicyName: "diamory-execution-role-policy-dynamodb"
      ExecutionRoleWithS3AccessPolicyName: "diamory-execution-role-policy-s3"


Resources:



  #     █████  ██    ██ ████████ ██   ██ 
  #    ██   ██ ██    ██    ██    ██   ██ 
  #    ███████ ██    ██    ██    ███████ 
  #    ██   ██ ██    ██    ██    ██   ██ 
  #    ██   ██  ██████     ██    ██   ██

  # TODO: define SES for mailing

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameAttributes:
        - "email"
      UsernameConfiguration:
        CaseSensitive: true
      AutoVerifiedAttributes:
        - "email"
      Schema: # TODO: define more later (credits, expires, etc.) (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-schemaattribute.html)
        - AttributeDataType: String
          DeveloperOnlyAttribute: true
          Mutable: true
          Required: false
          Name: "status"
      Policies:
        PasswordPolicy:
          MinimumLength: 16
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      # TODO: finish following settings
      # EmailConfiguration:
        # EmailSendingAccount: DEVELOPER
        # define later: ConfigurationSet, From, ReplyToEmailAddress, SourceArn)
        ## (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-emailconfiguration.html)
      # VerificationMessageTemplate: define this later
      ## (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-verificationmessagetemplate.html)

  
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - "code"
        - "implicit"
      AllowedOAuthScopes:
        - "profile"
        - "openid"
      CallbackURLs: 
        - !FindInMap [StagesMapping, !Ref StagesEnvironment, CallbackUrl]
      LogoutURLs:
        - !FindInMap [StagesMapping, !Ref StagesEnvironment, LogoutUrl]
      SupportedIdentityProviders:
        - "COGNITO"
      
  UserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub
        - "diamory-user-${environment}"
        - environment: !Ref StagesEnvironment



  #    ██████  ███████ ███████        █████   ██████  ██████ ███████ ███████ ███████ 
  #    ██   ██ ██      ██            ██   ██ ██      ██      ██      ██      ██      
  #    ██████  █████   ███████ █████ ███████ ██      ██      █████   ███████ ███████ 
  #    ██   ██ ██           ██       ██   ██ ██      ██      ██           ██      ██ 
  #    ██   ██ ███████ ███████       ██   ██  ██████  ██████ ███████ ███████ ███████

  ExecutionRoleWithDynamoDBAccess:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !FindInMap [StagesMapping, !Ref StagesEnvironment, ExecutionRoleWithDynamoDBAccessPolicyName]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "dynamodb:*"
                Resource: "arn:aws:dynamodb:eu-central-1:*:table/diamory-item*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:eu-central-1:*:*"
              - Effect: Allow
                Action: "logs:CreateLogGroup"
                Resource: "*"

  ExecutionRoleWithS3Access:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !FindInMap [StagesMapping, !Ref StagesEnvironment, ExecutionRoleWithS3AccessPolicyName]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: "arn:aws:s3:::diamory-payloads*/*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:eu-central-1:*:*"
              - Effect: Allow
                Action: "logs:CreateLogGroup"
                Resource: "*"



  #     █████  ██████  ██ 
  #    ██   ██ ██   ██ ██ 
  #    ███████ ██████  ██ 
  #    ██   ██ ██      ██ 
  #    ██   ██ ██      ██

  ApiDomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !FindInMap [StagesMapping, !Ref StagesEnvironment, Domain]
      DomainValidationOptions:
        - DomainName: !FindInMap [StagesMapping, !Ref StagesEnvironment, Domain]
          HostedZoneId: "Z02112923J7IQK3X4KU7D"
      ValidationMethod: DNS

  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          ManagerAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - !Ref UserPoolClient
              issuer: !Sub "https://cognito-idp.eu-central-1.amazonaws.com/${UserPool}"
        DefaultAuthorizer: ManagerAuthorizer
      Domain:
        DomainName: !FindInMap [StagesMapping, !Ref StagesEnvironment, Domain]
        CertificateArn: !Ref ApiDomainCertificate
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: "Z02112923J7IQK3X4KU7D"


  

  #    ██████   █████  ████████  █████  
  #    ██   ██ ██   ██    ██    ██   ██ 
  #    ██   ██ ███████    ██    ███████ 
  #    ██   ██ ██   ██    ██    ██   ██ 
  #    ██████  ██   ██    ██    ██   ██

  PayloadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap [StagesMapping, !Ref StagesEnvironment, PayloadsBucketName]
      VersioningConfiguration: 
        Status: Suspended
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ItemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !FindInMap [StagesMapping, !Ref StagesEnvironment, ItemTableName]
      TableClass: "STANDARD"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "accountId"
          AttributeType: "S"
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "payloadTimestamp"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "accountId"
          KeyType: "HASH"
        - AttributeName: "id"
          KeyType: "RANGE"
      LocalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: "accountId"
              KeyType: "HASH"
            - AttributeName: "payloadTimestamp"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "checksum"
            ProjectionType: "INCLUDE"



  #    ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██ ███████ 
  #    ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ ██      
  #    █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██ ███████ 
  #    ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██      ██ 
  #    ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ███████ 

  
  #      _ _                     
  #    (_) |_ ___ _ __ ___  ___ 
  #    | | __/ _ \ '_ ` _ \/ __|
  #    | | ||  __/ | | | | \__ \
  #    |_|\__\___|_| |_| |_|___/

  AddItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/items/add-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRoleWithDynamoDBAccess.Arn
      MemorySize: 256
      Architectures:
        - x86_64
      Environment:
        Variables:
          ItemTableName: !FindInMap [StagesMapping, !Ref StagesEnvironment, ItemTableName]
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /item
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"

  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/items/get-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRoleWithDynamoDBAccess.Arn
      MemorySize: 256
      Architectures:
        - x86_64
      Environment:
        Variables:
          ItemTableName: !FindInMap [StagesMapping, !Ref StagesEnvironment, ItemTableName]
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /item/{id}
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"

  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/items/update-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRoleWithDynamoDBAccess.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Environment:
        Variables:
          ItemTableName: !FindInMap [StagesMapping, !Ref StagesEnvironment, ItemTableName]
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /item
            Method: put
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/items/delete-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRoleWithDynamoDBAccess.Arn
      MemorySize: 256
      Architectures:
        - x86_64
      Environment:
        Variables:
          ItemTableName: !FindInMap [StagesMapping, !Ref StagesEnvironment, ItemTableName]
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /item/{id}
            Method: delete
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"


  #                        _                 _     
  #     _ __   __ _ _   _| | ___   __ _  __| |___ 
  #    | '_ \ / _` | | | | |/ _ \ / _` |/ _` / __|
  #    | |_) | (_| | |_| | | (_) | (_| | (_| \__ \
  #    | .__/ \__,_|\__, |_|\___/ \__,_|\__,_|___/
  #    |_|          |___/                                 

  AddPayloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/payloads/add-payload
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRoleWithS3Access.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Environment:
        Variables:
          PayloadsBucketName: !FindInMap [StagesMapping, !Ref StagesEnvironment, PayloadsBucketName]
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /payload/{checksum}
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-s3"

  GetPayloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/payloads/get-payload
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRoleWithS3Access.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Environment:
        Variables:
          PayloadsBucketName: !FindInMap [StagesMapping, !Ref StagesEnvironment, PayloadsBucketName]
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /payload/{checksum}
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-s3"

  ReplacePayloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/payloads/replace-payload
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRoleWithS3Access.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Environment:
        Variables:
          PayloadsBucketName: !FindInMap [StagesMapping, !Ref StagesEnvironment, PayloadsBucketName]
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /payload/{oldChecksum}/{newChecksum}
            Method: put
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-s3"

  DeletePayloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/payloads/delete-payload
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRoleWithS3Access.Arn
      MemorySize: 128
      Architectures:
        - x86_64
      Environment:
        Variables:
          PayloadsBucketName: !FindInMap [StagesMapping, !Ref StagesEnvironment, PayloadsBucketName]
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /payload/{checksum}
            Method: delete
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
          - app.ts
        External:
          - "@aws-sdk/client-s3"
