AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  diamory-server

  Sample SAM Template for diamory-server
  
Globals:
  Function:
    Timeout: 3

Resources:

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "diamory-user-pool"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 16
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
  
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: "diamory-user-pool-client"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - "code"
        - "implicit"
      AllowedOAuthScopes:
        - "profile"
        - "openid"
      CallbackURLs:
        - "https://diamory.de?callback"
      LogoutURLs:
        - "https://diamory.de?logout"
      SupportedIdentityProviders:
        - "COGNITO"
      
  UserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref UserPool 
      Domain: "diamory-user"

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: "diamory-user-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "diamory-user-execution-role-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "dynamodb:*"
                Resource: "arn:aws:dynamodb:eu-central-1:*:table/diamory-*"
              - Effect: Allow
                Action: "s3:*"
                Resource: "arn:aws:s3:::diamory-s3-bucket"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:eu-central-1:*:*"
              - Effect: Allow
                Action: "logs:CreateLogGroup"
                Resource: "*"

  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          ManagerAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - !Ref UserPoolClient
              issuer: !Sub "https://cognito-idp.eu-central-1.amazonaws.com/${UserPool}"
        DefaultAuthorizer: ManagerAuthorizer
      #### TODO: enable and edit to diamory domain when registered in aws
      #Domain:
        #DomainName: "diamory.de"
        #CertificateArn: "arn:aws:acm:eu-central-1:828803652383:certificate/4b5d3c42-6d59-4056-9a08-710db8ee023c"
        #EndpointConfiguration: REGIONAL
        #Route53:
          #HostedZoneId: "Z078443521KM7OIOUJEME"
  
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: diamory-s3-bucket
      VersioningConfiguration: 
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ItemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "diamory-item"
      TableClass: "STANDARD"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "accountId"
          AttributeType: "S"
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "payloadTimestamp"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "accountId"
          KeyType: "HASH"
        - AttributeName: "id"
          KeyType: "RANGE"
      LocalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: "accountId"
              KeyType: "HASH"
            - AttributeName: "payloadTimestamp"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "checksum"
              - "keepOffline"
            ProjectionType: "INCLUDE"

  AccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "diamory-account"
      TableClass: "STANDARD"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "accountId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "accountId"
          KeyType: "HASH"

  AddItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/add-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 256
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /put-item
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - app.ts

  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/get-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 256
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /get-item/{id}
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - app.ts

  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/update-item
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: 256
      Architectures:
        - x86_64
      Events:
        HttpApiGetEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /update-item/{id}
            Method: update
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - app.ts
